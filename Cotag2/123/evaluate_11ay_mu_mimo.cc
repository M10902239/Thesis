/*
 * Copyright (c) 2015-2020 IMDEA Networks Institute
 * Authors: Nina Grosheva <nina_grosheva@hotmail.com>
 *          Hany Assasa <hany.assasa@gmail.com>
 */
#include "ns3/applications-module.h"
#include "ns3/core-module.h"
#include "ns3/flow-monitor-module.h"
#include "ns3/internet-module.h"
#include "ns3/mobility-module.h"
#include "ns3/network-module.h"
#include "ns3/spectrum-module.h"
#include "ns3/wifi-module.h"
#include "common-functions.h"
#include <iomanip>
#include <sstream>

/**
 * Simulation Objective:
 * Evaluate the MU-MIMO beamforming training mechansim in the IEEE 802.11ay standard.
 *
 * Network Topology:
 * Network topology is simple and consists of a single EDMG PCP/AP and two EDMG STAs.
 *
 * Simulation Description:
 * Both EDMG PCP/AP and EDMG STA use a parametric codebook generated by our IEEE 802.11ay
 * Codebook Generator Application in MATLAB. The EDMG AP uses two URA antenna arrays of
 * 2x8 Elements whereas the two EDMA STAs use single PAA. The channel model is generated by
 * our Q-D realization software.
 *
 * Running the Simulation:
 * ./waf --run "evaluate_11ay_mu_mimo"
 *
 * Changing the number of K-Best combinations:
 * ./waf --run "evaluate_11ay_mu_mimo --kBestCombinations=15"
 *
 * Changing the number of K-Best combinations and the simulated Q-D scenario:
 * ./waf --run "evaluate_11ay_mu_mimo --qdChannelFolder=IndoorMuMimo120 --kBestCombinations=120"
 *
 * Simulation Output:
 * The simulation generates the following traces:
 * 1. PCAP traces for each station.
 * 2. SNR data for all the packets.
 * 3. MU-MIMO SISO and MIMO phases traces.
 */

NS_LOG_COMPONENT_DEFINE ("Evaluate11ayMU-MIMO");

using namespace ns3;
using namespace std;

/* Network Nodes */
Ptr<WifiNetDevice> apWifiNetDevice, staWifiNetDevice1, staWifiNetDevice2;
Ptr<DmgApWifiMac> apWifiMac;
Ptr<DmgWifiPhy> apWifiPhy;
Ptr<WifiRemoteStationManager> apRemoteStationManager;
NetDeviceContainer staDevices;

/* Statistics */
uint64_t macTxDataFailed = 0;
uint64_t transmittedPackets = 0;
uint64_t droppedPackets = 0;
uint64_t receivedPackets = 0;
bool csv = false;                         /* Enable CSV output. */

/*** Beamforming Service Periods ***/
uint8_t beamformedLinks = 0;              /* Number of beamformed links */
bool firstDti1 = true;
bool firstDti2 = true;
bool muMimoCompleted = false;
uint32_t kBestCombinations = 15;          /* The number of K best candidates to test in the MIMO phase . */

void
SLSCompleted (Ptr<DmgWifiMac> wifiMac, SlsCompletionAttrbitutes attributes)
{
  if (!csv)
    {
      std::cout << "EDMG STA " << wifiMac->GetAddress ()
                << " completed SLS phase with EDMG STA " << attributes.peerStation << std::endl;
      std::cout << "Best Tx Antenna Configuration: AntennaID=" << uint16_t (attributes.antennaID)
                << ", SectorID=" << uint16_t (attributes.sectorID) << std::endl;
//      wifiMac->PrintSnrTable ();
      if (attributes.accessPeriod == CHANNEL_ACCESS_DTI)
        {
          beamformedLinks++;
        }
    }
}

void
MacRxOk (Ptr<OutputStreamWrapper> stream, WifiMacType, Mac48Address, double snrValue)
{
  *stream->GetStream () << Simulator::Now ().GetNanoSeconds () << "," << snrValue << std::endl;
}

void
StationAssoicated (Ptr<DmgWifiMac> staWifiMac, Mac48Address address, uint16_t aid)
{
  if (!csv)
    {
      std::cout << "EDMG STA " << staWifiMac->GetAddress () << " associated with EDMG PCP/AP " << address
                << ", Association ID (AID) = " << aid << std::endl;
    }
}

void
MacTxDataFailed (Mac48Address)
{
  macTxDataFailed++;
}

void
PhyTxEnd (Ptr<const Packet>)
{
  transmittedPackets++;
}

void
PhyRxDrop (Ptr<const Packet> packet, WifiPhyRxfailureReason reason)
{
  droppedPackets++;
}

void
PhyRxEnd (Ptr<const Packet>)
{
  receivedPackets++;
}

void
MuMimoSisoFbckPolled (Ptr<DmgWifiMac> wifiMac, Mac48Address from)
{
  std::cout << "EDMG STA " << wifiMac->GetAddress ()
            << " received a poll for feedback as part of the SISO Fbck phase of MU-MIMO BFT from "
            << from << " at " << Simulator::Now ().GetSeconds () << std::endl;
  bool useAwvsInMimoPhase = false;
  wifiMac->SendBrpFbckFrame (from, useAwvsInMimoPhase);
}

void
MuMimoSisoPhaseMeasurements (Ptr<DmgWifiMac> wifiMac, Mac48Address from, MU_MIMO_SNR_MAP map, uint8_t muGroupID, uint16_t bftID)
{
  std::cout << "EDMG STA " << wifiMac->GetAddress ()
            << " reporting SISO phase measurements of MU-MIMO BFT with EDMG STA " << from << " at "
            << Simulator::Now ().GetSeconds () << std::endl;
}

void
MuMimoSisoPhaseCompleted (Ptr<DmgWifiMac> wifiMac, MIMO_FEEDBACK_MAP feedbackMap,
                          uint8_t numberOfTxAntennas, uint8_t numberOfRxAntennas, uint8_t muGroupID, uint16_t bftID)
{
  std::cout << "EDMG STA " << wifiMac->GetAddress ()
            << " finished SISO phase of MU-MIMO BFT at " << Simulator::Now ().GetSeconds () << std::endl;
  MIMO_ANTENNA_COMBINATIONS_LIST mimoCandidates =
      wifiMac->FindKBestCombinations (kBestCombinations, numberOfTxAntennas, numberOfRxAntennas, feedbackMap);
  //mimoCandidates.erase (mimoCandidates.begin (), mimoCandidates.begin () + 28);
  /* Append 5 AWVs to each sector in the codebook, increasing the granularity of steering to 5 degrees*/
  DynamicCast<CodebookParametric> (wifiMac->GetCodebook ())->AppendAwvsForSuMimoBFT_27 ();
  bool useAwvsInMimoPhase = false;
  wifiMac->StartMuMimoMimoPhase (mimoCandidates, useAwvsInMimoPhase);
}

void
MuMimoMimoCandidatesSelected (Ptr<DmgWifiMac> wifiMac, uint8_t muGroupId, Antenna2SectorList, uint16_t)
{
  std::cout << "EDMG STA " << wifiMac->GetAddress ()
            << " reporting MIMO candidates Selection for MU-MIMO BFT with MU Group " << uint16_t (muGroupId)
            << " at " << Simulator::Now ().GetSeconds () << std::endl;
}

void
MuMimoMimoPhaseMeasurements (Ptr<DmgWifiMac> wifiMac, MimoPhaseMeasurementsAttributes attributes, uint8_t muGroupID)
{
  std::cout << "EDMG STA " << wifiMac->GetAddress ()
            << " reporting MIMO phase measurements for MU-MIMO BFT with MU Group " << uint16_t (muGroupID)
            << " at " << Simulator::Now ().GetSeconds () << std::endl;
}

void
MuMimoMimoPhaseCompleted (Ptr<DmgWifiMac> wifiMac)
{
  std::cout << "EDMG STA " << wifiMac->GetAddress ()
            << " finished MIMO phase of MU-MIMO BFT at " << Simulator::Now ().GetSeconds () << std::endl;
  muMimoCompleted = true;
}

void
DataTransmissionIntervalStarted (Ptr<DmgStaWifiMac> wifiMac, Mac48Address address, Time dtiDuration)
{
  if (wifiMac->IsAssociated () && firstDti1)
    {

      wifiMac->Perform_TXSS_TXOP (wifiMac->GetBssid ());
      DynamicCast<CodebookParametric> (wifiMac->GetCodebook ())->AppendAwvsForSuMimoBFT_27 ();
      firstDti1 = false;
    }
  else if (wifiMac->IsAssociated () && firstDti2)
    {
      wifiMac->Perform_TXSS_TXOP (wifiMac->GetBssid ());
      DynamicCast<CodebookParametric> (wifiMac->GetCodebook ())->AppendAwvsForSuMimoBFT_27 ();
      firstDti2 = false;
    }
}

void
DataTransmissionIntervalStartedAp (Ptr<DmgApWifiMac> wifiMac, Mac48Address address, Time dtiDuration)
{
  if ((beamformedLinks == 4) && !muMimoCompleted)
    {
      EDMGGroupTuples groupTuples = wifiMac->GetEdmgGroupIdSetElement ()->GetEDMGGroupTuples ();
      std::cout << "EDMG STA " << wifiMac->GetAddress ()
                << " initiating MU-MIMO BFT with EDMG Group " << uint16_t (groupTuples.begin ()->groupID)
                << " at " << Simulator::Now ().GetSeconds () << std::endl;
      Simulator::Schedule (MicroSeconds (1), &DmgWifiMac::StartMuMimoBeamforming, wifiMac,
                           true, groupTuples.begin ()->groupID);
    }
}

void
ConnectStaTraces (Ptr<MuMimoBeamformingTraceHelper> beamformingTracerHelper, Ptr<WifiMac> wifiMac)
{
  Ptr<DmgWifiMac> dmgWifiMac = StaticCast<DmgWifiMac> (wifiMac);
  Ptr<DmgWifiPhy> wifiPhy = StaticCast<DmgWifiPhy> (wifiMac->GetWifiPhy ());
  beamformingTracerHelper->ConnectTrace (dmgWifiMac);
  dmgWifiMac->TraceConnectWithoutContext ("Assoc", MakeBoundCallback (&StationAssoicated, dmgWifiMac));
  dmgWifiMac->TraceConnectWithoutContext ("SLSCompleted", MakeBoundCallback (&SLSCompleted, dmgWifiMac));
  dmgWifiMac->TraceConnectWithoutContext ("MuMimoSisoFbckPolled", MakeBoundCallback (&MuMimoSisoFbckPolled, dmgWifiMac));
  dmgWifiMac->TraceConnectWithoutContext ("MuMimoSisoPhaseMeasurements", MakeBoundCallback (&MuMimoSisoPhaseMeasurements, dmgWifiMac));
  dmgWifiMac->TraceConnectWithoutContext ("MuMimoMimoPhaseMeasurements", MakeBoundCallback (&MuMimoMimoPhaseMeasurements, dmgWifiMac));
  dmgWifiMac->TraceConnectWithoutContext ("MuMimoMimoPhaseCompleted", MakeBoundCallback (&MuMimoMimoPhaseCompleted, dmgWifiMac));
  dmgWifiMac->TraceConnectWithoutContext ("DTIStarted", MakeBoundCallback (&DataTransmissionIntervalStarted,
                                                                           StaticCast<DmgStaWifiMac> (dmgWifiMac)));
  wifiPhy->TraceConnectWithoutContext ("PhyTxEnd", MakeCallback (&PhyTxEnd));
  dmgWifiMac->GetWifiRemoteStationManager ()->TraceConnectWithoutContext ("MacTxDataFailed", MakeCallback (&MacTxDataFailed));
}

int
main (int argc, char *argv[])
{
  string msduAggSize = "max";                                     /* The maximum aggregation size for A-MSDU in Bytes. */
  string mpduAggSize = "max";                                     /* The maximum aggregation size for A-MPDU in Bytes. */
  string phyMode = "EDMG_SC_MCS1";                                /* Type of the Physical Layer. */
  bool verbose = false;                                           /* Print Logging Information. */
  double simulationTime = 10;                                     /* Simulation time in seconds. */
  bool pcapTracing = false;                                       /* PCAP Tracing is enabled or not. */
  std::string arrayConfigAp = "28x_AzEl_SU-MIMO_2x2_27";          /* Phased antenna array configuration. */
  std::string arrayConfigSta = "28x_AzEl_27";                     /* Phased antenna array configuration. */
  std::string qdChannelFolder = "IndoorMuMimo120/Output/Ns3";     /* Path to the folder containing SU-MIMO Q-D files. */
  std::string tracesFolder = "Traces/";                           /* Directory to store the traces. */
  bool preambleDetection = true;	             /* Whether a preamble detection model is used. */
  double preambleMinRssi = -78; 		     /* The min RSSI needed to detect the preamble if a preamble detection model is used. */
  double preambleSnrThreshold = -10;		     /* The min SNR needed to detect the preamble if a preamble detection model us used. */

  /* Command line argument parser setup. */
  CommandLine cmd;
  cmd.AddValue ("msduAggSize", "The maximum aggregation size for A-MSDU in Bytes", msduAggSize);
  cmd.AddValue ("msduAggSize", "The maximum aggregation size for A-MPDU in Bytes", msduAggSize);
  cmd.AddValue ("phyMode", "802.11ay PHY Mode", phyMode);
  cmd.AddValue ("verbose", "Turn on all WifiNetDevice log components", verbose);
  cmd.AddValue ("simulationTime", "Simulation time in seconds", simulationTime);
  cmd.AddValue ("kBestCombinations", "The number of K best candidates to test in the MIMO phase", kBestCombinations);
  cmd.AddValue ("pcap", "Enable PCAP Tracing", pcapTracing);
  cmd.AddValue ("arrayConfigAp", "Antenna array configuration for the AP", arrayConfigAp);
  cmd.AddValue ("arrayConfigSta", "Antenna array configuration for the STAs", arrayConfigSta);
  cmd.AddValue ("qdChannelFolder", "Path to the Q-D files describing the MU-MIMO scenario", qdChannelFolder);
  cmd.AddValue ("tracesFolder", "Path to the folder where we dump all the traces", tracesFolder);
  cmd.AddValue ("csv", "Enable CSV output instead of plain text. This mode will suppress all the messages related statistics and events.", csv);
  cmd.Parse (argc, argv);

  /* Validate A-MSDU and A-MPDU values */
  ValidateFrameAggregationAttributes (msduAggSize, mpduAggSize, WIFI_PHY_STANDARD_80211ay);

  /**** DmgWifiHelper is a meta-helper ****/
  DmgWifiHelper wifi;

  /* Basic setup */
  wifi.SetStandard (WIFI_PHY_STANDARD_80211ay);

  /* Turn on logging */
  if (verbose)
    {
      wifi.EnableLogComponents ();
    }

  /**** Setup mmWave Q-D Channel ****/
  /**** Set up Channel ****/
  Ptr<MultiModelSpectrumChannel> spectrumChannel = CreateObject<MultiModelSpectrumChannel> ();
  Ptr<QdPropagationEngine> qdPropagationEngine = CreateObject<QdPropagationEngine> ();
  qdPropagationEngine->SetAttribute ("QDModelFolder",
                                     StringValue ("WigigFiles/QdChannel/MU-MIMO-Scenarios/" + qdChannelFolder + "/Output/Ns3/"));
  Ptr<QdPropagationLossModel> lossModelRaytracing = CreateObject<QdPropagationLossModel> (qdPropagationEngine);
  Ptr<QdPropagationDelayModel> propagationDelayRayTracing = CreateObject<QdPropagationDelayModel> (qdPropagationEngine);
  spectrumChannel->AddSpectrumPropagationLossModel (lossModelRaytracing);
  spectrumChannel->SetPropagationDelayModel (propagationDelayRayTracing);

  /**** Setup physical layer ****/
  SpectrumDmgWifiPhyHelper spectrumWifiPhy = SpectrumDmgWifiPhyHelper::Default ();
  spectrumWifiPhy.SetChannel (spectrumChannel);
  /* All nodes transmit at 10 dBm == 10 mW, no adaptation */
  spectrumWifiPhy.Set ("TxPowerStart", DoubleValue (10.0));
  spectrumWifiPhy.Set ("TxPowerEnd", DoubleValue (10.0));
  spectrumWifiPhy.Set ("TxPowerLevels", UintegerValue (1));
  /* Add a preamble detection model based on thresholds for the RSSI and SINR of the preamble. */
  if (preambleDetection)
  {
     spectrumWifiPhy.Set ("PreambleDetectionModel", StringValue ("ns3::ThresholdPreambleDetectionModel"));
     Config::SetDefault ("ns3::ThresholdPreambleDetectionModel::MinimumRssi", DoubleValue (preambleMinRssi));
     Config::SetDefault ("ns3::ThresholdPreambleDetectionModel::Threshold", DoubleValue (preambleSnrThreshold));
  }
  /* Set the operational channel */
  spectrumWifiPhy.Set ("ChannelNumber", UintegerValue (2));
  /* Set the correct error model */
  spectrumWifiPhy.SetErrorRateModel ("ns3::DmgErrorModel",
                                     "FileName", StringValue ("WigigFiles/ErrorModel/LookupTable_1458_ay.txt"));
  /* Enable support for MU-MIMO */
  spectrumWifiPhy.Set ("SupportMuMimo", BooleanValue (true));
  /* Set default algorithm for all nodes to be constant rate */
  wifi.SetRemoteStationManager ("ns3::ConstantRateWifiManager", "DataMode", StringValue (phyMode));
  /* Make four nodes and set them up with the phy and the mac */
  NodeContainer wifiNodes;
  wifiNodes.Create (3);
  Ptr<Node> apWifiNode = wifiNodes.Get (0);
  Ptr<Node> sta1WifiNode = wifiNodes.Get (1);
  Ptr<Node> sta2WifiNode = wifiNodes.Get (2);

  /* Setup EDMG MAC */
  DmgWifiMacHelper wifiMac = DmgWifiMacHelper::Default ();

  /* Install DMG PCP/AP Node */
  Ssid ssid = Ssid ("MU-MIMO");
  wifiMac.SetType ("ns3::DmgApWifiMac",
                   "Ssid", SsidValue (ssid),
                   "BE_MaxAmpduSize", StringValue (mpduAggSize),
                   "BE_MaxAmsduSize", StringValue (msduAggSize),
                   "SSSlotsPerABFT", UintegerValue (8), "SSFramesPerSlot", UintegerValue (16),
                   "BeaconInterval", TimeValue (MicroSeconds (102400)),
                   "EDMGSupported", BooleanValue (true));

  /* Set Parametric Codebook for the EDMG AP */
  wifi.SetCodebook ("ns3::CodebookParametric",
                    "FileName", StringValue ("WigigFiles/Codebook/CODEBOOK_URA_AP_" + arrayConfigAp + ".txt"));

  /* Create Wifi Network Devices (WifiNetDevice) */
  NetDeviceContainer apDevice;
  apDevice = wifi.Install (spectrumWifiPhy, wifiMac, apWifiNode);

  wifiMac.SetType ("ns3::DmgStaWifiMac",
                   "Ssid", SsidValue (ssid), "ActiveProbing", BooleanValue (false),
                   "BE_MaxAmpduSize", StringValue (mpduAggSize),
                   "BE_MaxAmsduSize", StringValue (msduAggSize),
                   "EDMGSupported", BooleanValue (true));

  /* Set Parametric Codebook for the EDMG STA */
  wifi.SetCodebook ("ns3::CodebookParametric",
                    "FileName", StringValue ("WigigFiles/Codebook/CODEBOOK_URA_STA_" + arrayConfigSta + ".txt"));

  NetDeviceContainer staDevice1, staDevice2;
  staDevice1 = wifi.Install (spectrumWifiPhy, wifiMac, sta1WifiNode);
  staDevice2 = wifi.Install (spectrumWifiPhy, wifiMac, sta2WifiNode);

  staDevices.Add (staDevice1);
  staDevices.Add (staDevice2);

  /* Setting mobility model */
  MobilityHelper mobility;
  mobility.SetMobilityModel ("ns3::ConstantPositionMobilityModel");
  mobility.Install (wifiNodes);

  /* Internet stack */
  InternetStackHelper stack;
  stack.Install (wifiNodes);

  Ipv4AddressHelper address;
  address.SetBase ("10.0.0.0", "255.255.255.0");
  Ipv4InterfaceContainer apInterface;
  apInterface = address.Assign (apDevice);
  Ipv4InterfaceContainer staInterfaces;
  staInterfaces = address.Assign (staDevices);

  /* We do not want any ARP packets */
  PopulateArpCache ();

  /* Enable Traces */
  if (pcapTracing)
    {
      spectrumWifiPhy.SetPcapDataLinkType (YansWifiPhyHelper::DLT_IEEE802_11_RADIO);
      spectrumWifiPhy.SetSnapshotLength (120);
      spectrumWifiPhy.EnablePcap ("Traces/AccessPoint", apDevice, false);
      spectrumWifiPhy.EnablePcap ("Traces/STA", staDevices, false);
    }

  /* Stations */
  apWifiNetDevice = StaticCast<WifiNetDevice> (apDevice.Get (0));
  staWifiNetDevice1 = StaticCast<WifiNetDevice> (staDevices.Get (0));
  staWifiNetDevice2 = StaticCast<WifiNetDevice> (staDevices.Get (1));
  apRemoteStationManager = StaticCast<WifiRemoteStationManager> (apWifiNetDevice->GetRemoteStationManager ());
  apWifiMac = StaticCast<DmgApWifiMac> (apWifiNetDevice->GetMac ());
  apWifiPhy = StaticCast<DmgWifiPhy> (apWifiNetDevice->GetPhy ());

  /** Connect Traces **/
  Ptr<MuMimoBeamformingTraceHelper> beamformingTracerHelper
      = Create<MuMimoBeamformingTraceHelper> (qdPropagationEngine, tracesFolder, std::to_string (RngSeedManager::GetRun ()));

  /* EDMG AP Traces */
  beamformingTracerHelper->ConnectTrace (apWifiMac);
  apWifiMac->TraceConnectWithoutContext ("SLSCompleted", MakeBoundCallback (&SLSCompleted, apWifiMac));
  apWifiMac->TraceConnectWithoutContext ("MuMimoSisoPhaseCompleted", MakeBoundCallback (&MuMimoSisoPhaseCompleted, apWifiMac));
  apWifiMac->TraceConnectWithoutContext ("MuMimoMimoCandidatesSelected", MakeBoundCallback (&MuMimoMimoCandidatesSelected, apWifiMac));
  apWifiMac->TraceConnectWithoutContext ("MuMimoMimoPhaseCompleted", MakeBoundCallback (&MuMimoMimoPhaseCompleted, apWifiMac));
  apWifiMac->TraceConnectWithoutContext ("DTIStarted", MakeBoundCallback (&DataTransmissionIntervalStartedAp, apWifiMac));
  apWifiPhy->TraceConnectWithoutContext ("PhyRxEnd", MakeCallback (&PhyRxEnd));
  apWifiPhy->TraceConnectWithoutContext ("PhyRxDrop", MakeCallback (&PhyRxDrop));

  /* EDMG STA Straces */
  ConnectStaTraces (beamformingTracerHelper, staWifiNetDevice1->GetMac ());
  ConnectStaTraces (beamformingTracerHelper, staWifiNetDevice2->GetMac ());

  /* Get SNR Traces */
  AsciiTraceHelper ascii;
  Ptr<OutputStreamWrapper> snrStream = ascii.CreateFileStream (tracesFolder + "snrValues.csv");
  apRemoteStationManager->TraceConnectWithoutContext ("MacRxOK", MakeBoundCallback (&MacRxOk, snrStream));

  Simulator::Stop (Seconds (simulationTime + 0.101));
  Simulator::Run ();
  Simulator::Destroy ();

  return 0;
}
